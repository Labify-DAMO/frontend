//
//  QRViewModel.swift
//  Labify
//
//  Created by F_S on 10/30/25.
//

import Foundation
import SwiftUI

@MainActor
class QRViewModel: ObservableObject {
    // MARK: - Published Properties
    
    // QR ÏΩîÎìú Ï∫êÏãú (disposalItemId: imageData)
    @Published var qrCodeCache: [Int: Data] = [:]
    
    // ÌòÑÏû¨ ÌëúÏãú Ï§ëÏù∏ QR ÏΩîÎìú
    @Published var currentQRCode: QRCodeItem?
    
    // Î°úÎî© ÏÉÅÌÉú
    @Published var isLoading = false
    @Published var isGenerating = false
    @Published var showError = false
    @Published var errorMessage: String?
    
    // ÏÑ±Í≥µ Î©îÏãúÏßÄ
    @Published var showSuccessMessage = false
    @Published var successMessage: String?
    
    // MARK: - Private Properties
    
    private var token: String? {
        UserDefaults.standard.string(forKey: "accessToken")
    }
    
    // MARK: - ‚úÖ QR ÏΩîÎìú ÏÉùÏÑ±
    /// ÌäπÏ†ï ÌèêÍ∏∞Î¨ºÏóê ÎåÄÌïú QR ÏΩîÎìúÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
    func generateQRCode(
        disposalItemId: Int,
        wasteTypeName: String,
        weight: Double,
        unit: String
    ) async -> Bool {
        guard let token = token else {
            handleError(NetworkError.unauthorized)
            return false
        }
        
        isGenerating = true
        defer { isGenerating = false }
        
        do {
            let imageData = try await QRService.createQRCode(
                disposalItemId: disposalItemId,
                token: token
            )
            
            print("‚úÖ QR ÏΩîÎìú ÏÉùÏÑ± ÏÑ±Í≥µ: Disposal ID=\(disposalItemId), Size=\(imageData.count) bytes")
            
            // Ï∫êÏãúÏóê Ï†ÄÏû•
            qrCodeCache[disposalItemId] = imageData
            
            // ÌòÑÏû¨ QR ÏΩîÎìú ÏÑ§Ï†ï
            currentQRCode = QRCodeItem(
                id: disposalItemId,
                wasteTypeName: wasteTypeName,
                weight: weight,
                unit: unit,
                imageData: imageData
            )
            
            // ÏÑ±Í≥µ Î©îÏãúÏßÄ
            successMessage = "QR ÏΩîÎìúÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§."
            showSuccessMessage = true
            
            return true
        } catch {
            handleError(error)
            return false
        }
    }
    
    // MARK: - ‚úÖ QR ÏΩîÎìú Ïù¥ÎØ∏ÏßÄ Ï°∞Ìöå
    /// ÌäπÏ†ï ÌèêÍ∏∞Î¨ºÏùò QR ÏΩîÎìú Ïù¥ÎØ∏ÏßÄÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.
    func fetchQRCodeImage(
        disposalItemId: Int,
        wasteTypeName: String,
        weight: Double,
        unit: String
    ) async -> Bool {
        guard let token = token else {
            handleError(NetworkError.unauthorized)
            return false
        }
        
        // Ï∫êÏãúÏóê ÏûàÏúºÎ©¥ Ï∫êÏãú ÏÇ¨Ïö©
        if let cachedData = qrCodeCache[disposalItemId] {
            print("üíæ Ï∫êÏãúÏóêÏÑú QR ÏΩîÎìú Î°úÎìú: Disposal ID=\(disposalItemId)")
            currentQRCode = QRCodeItem(
                id: disposalItemId,
                wasteTypeName: wasteTypeName,
                weight: weight,
                unit: unit,
                imageData: cachedData
            )
            return true
        }
        
        isLoading = true
        defer { isLoading = false }
        
        do {
            let imageData = try await QRService.fetchQRCodeImage(
                disposalItemId: disposalItemId,
                token: token
            )
            
            print("‚úÖ QR ÏΩîÎìú Ï°∞Ìöå ÏÑ±Í≥µ: Disposal ID=\(disposalItemId), Size=\(imageData.count) bytes")
            
            // Ï∫êÏãúÏóê Ï†ÄÏû•
            qrCodeCache[disposalItemId] = imageData
            
            // ÌòÑÏû¨ QR ÏΩîÎìú ÏÑ§Ï†ï
            currentQRCode = QRCodeItem(
                id: disposalItemId,
                wasteTypeName: wasteTypeName,
                weight: weight,
                unit: unit,
                imageData: imageData
            )
            
            return true
        } catch {
            handleError(error)
            return false
        }
    }
    
    // MARK: - ‚úÖ QR ÏΩîÎìú ÏÉùÏÑ± ÎòêÎäî Ï°∞Ìöå
    /// QR ÏΩîÎìúÍ∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±ÌïòÍ≥†, ÏûàÏúºÎ©¥ Ï°∞ÌöåÌï©ÎãàÎã§.
    func getOrCreateQRCode(
        disposalItemId: Int,
        wasteTypeName: String,
        weight: Double,
        unit: String
    ) async -> Bool {
        // Î®ºÏ†Ä Ï°∞Ìöå ÏãúÎèÑ
        let fetchSuccess = await fetchQRCodeImage(
            disposalItemId: disposalItemId,
            wasteTypeName: wasteTypeName,
            weight: weight,
            unit: unit
        )
        
        if fetchSuccess {
            return true
        }
        
        // Ï°∞Ìöå Ïã§Ìå®Ïãú ÏÉùÏÑ± ÏãúÎèÑ
        return await generateQRCode(
            disposalItemId: disposalItemId,
            wasteTypeName: wasteTypeName,
            weight: weight,
            unit: unit
        )
    }
    
    // MARK: - Ï∫êÏãú Í¥ÄÎ¶¨
    
    /// ÌäπÏ†ï QR ÏΩîÎìú Ï∫êÏãú ÏÇ≠Ï†ú
    func clearQRCodeCache(disposalItemId: Int) {
        qrCodeCache.removeValue(forKey: disposalItemId)
        if currentQRCode?.id == disposalItemId {
            currentQRCode = nil
        }
    }
    
    /// Î™®Îì† QR ÏΩîÎìú Ï∫êÏãú ÏÇ≠Ï†ú
    func clearAllCache() {
        qrCodeCache.removeAll()
        currentQRCode = nil
    }
    
    /// Ï∫êÏãú Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
    func hasCachedQRCode(disposalItemId: Int) -> Bool {
        qrCodeCache[disposalItemId] != nil
    }
    
    /// Ï∫êÏãúÏóêÏÑú QR ÏΩîÎìú Í∞ÄÏ†∏Ïò§Í∏∞
    func getCachedQRCode(disposalItemId: Int) -> Data? {
        qrCodeCache[disposalItemId]
    }
    
    // MARK: - Ìé∏Ïùò Î©îÏÑúÎìú
    
    /// ÌòÑÏû¨ QR ÏΩîÎìú Ï¥àÍ∏∞Ìôî
    func clearCurrentQRCode() {
        currentQRCode = nil
    }
    
    /// QR ÏΩîÎìú Ïù¥ÎØ∏ÏßÄÎ•º ÏÇ¨ÏßÑ Ïï±Ïóê Ï†ÄÏû•
    func saveQRCodeToPhotos() -> Bool {
        guard let imageData = currentQRCode?.imageData,
              let image = UIImage(data: imageData) else {
            errorMessage = "Ï†ÄÏû•Ìï† QR ÏΩîÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§."
            showError = true
            return false
        }
        
        UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil)
        successMessage = "QR ÏΩîÎìúÍ∞Ä ÏÇ¨ÏßÑ Ïï±Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§."
        showSuccessMessage = true
        return true
    }
    
    /// QR ÏΩîÎìú Ïù¥ÎØ∏ÏßÄ Í≥µÏú†Î•º ÏúÑÌïú UIImage Î∞òÌôò
    func getShareableImage() -> UIImage? {
        guard let imageData = currentQRCode?.imageData else {
            return nil
        }
        return UIImage(data: imageData)
    }
    
    // MARK: - ÏóêÎü¨ Ï≤òÎ¶¨
    private func handleError(_ error: Error) {
        if let networkError = error as? NetworkError {
            errorMessage = networkError.localizedDescription
        } else {
            errorMessage = error.localizedDescription
        }
        showError = true
        print("‚ùå QRViewModel Error: \(errorMessage ?? "Unknown")")
    }
}

